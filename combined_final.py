# -*- coding: utf-8 -*-
"""Combined_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16UIFH1rLtvu2Z4E8tgmVzx3mf_j8Udxb
"""

import os
import sys
import pandas as pd
import io


from electricity import predictElec
from solar import predictSolar
from aqiPrediction import predictAQI



def predictCarbonFootprint(dataset1,dataset2,area):
    dataset1 = dataset1.reset_index()
    dataset1 = dataset1.drop('index',axis=1) 
    print(dataset1)
    print(dataset2)        

    area = area * 4046.86

    dataset2['Solar power'] = dataset2['Solar power']*area
    dataset2['Solar power'] = dataset2['Solar power']*20
    dataset2['Solar power'] = dataset2['Solar power']/100    
    print(dataset2)        

    req = pd.DataFrame()
    req['Date'] = dataset1['Date']
    req['Carbon Footprint with Solar power'] = dataset1['Electricity']-dataset2['Solar power']
    req['Carbon Footprint with Solar power'] = req['Carbon Footprint with Solar power'] * 0.80 + dataset2['Solar power']*0.050
    req['Carbon Footprint without Solar power']  = dataset1['Electricity']*0.80 
    req['Carbon Footprint without Solar power']  = req['Carbon Footprint without Solar power']  - req['Carbon Footprint with Solar power']

    return req

def main():
    sensorData = pd.read_csv('file_name_sensor1.csv')
    uploaded = pd.read_csv("./file_name1.csv")
    filename1 = list(uploaded.keys())[0]

    # df1 = pd.read_csv(io.BytesIO(uploaded[filename1]))
    df1,plotter1 = predictElec(uploaded)
    filename2 = "./Power.csv"

    plotter2 = predictSolar(plotter1['Date'].tail(1).values[0],filename2)
    res1=plotter1
    plotter3 = predictCarbonFootprint(res1,plotter2,2)
    ploti= pd.DataFrame()
    ploti['Electricity'] = df1['y']
    ploti['Date'] = df1['Date']

    print(ploti)
    initial_cf = df1

    initial_cf['Carbon footprint']=df1['y']*0.8
    initial_cf['Date']=df1['Date']

    plotter3=plotter3.drop(plotter3.head(5).index)
    ploti.plot(x='Date',y='Electricity').get_figure().savefig('./static/image/datasetElectricity.png')
    plotter1.plot(x='Date',y='Electricity').get_figure().savefig('./static/image/futureElectricity.png')
    initial_cf.plot(x='Date',y='Carbon footprint').get_figure().savefig('./static/image/initialCarbonFootprint.png')
    plotter2.plot(x='Date',y='Solar power').get_figure().savefig('./static/image/futureSolarPower.png')
    plotter3.plot.bar(x='Date', stacked=True,figsize=(13,14)).get_figure().savefig('./static/image/futureCarbonFootprint.png')

    savedElectricity = plotter2['Solar power'].sum()
    finalDate = plotter1['Date'].max()
    abatedCarbonEmission = (savedElectricity*0.8)-(savedElectricity*0.050)

    return finalDate.date(),savedElectricity,abatedCarbonEmission,predictAQI(sensorData)
